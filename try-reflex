#!/usr/bin/env bash
set -eux

PLATFORM=${1:-ghcjs}
shift 1 || true

REPO="https://github.com/ryantrinkle/try-reflex"

trap "echo 'It looks like a problem occurred.  Please submit an issue at $REPO/issues'; exit 1" ERR

echo "If you have any trouble with this script, please submit an issue at $REPO/issues"

if [ ! -d /nix ] ; then
  if ! type -P curl >/dev/null ; then
    echo "Please make sure that 'curl' is installed and can be run from this shell"
    exit 1
  fi

  echo "In order to continue, $0 must install the Nix package manager.  This requires root access, so you will be prompted for your password.  If you do not wish to continue, just hit Ctrl-C at the password prompt."
  bash <(curl https://nixos.org/nix/install)
fi

if ! type -P nix-shell >/dev/null ; then
  . ~/.nix-profile/etc/profile.d/nix.sh
  if ! type -P nix-shell >/dev/null ; then
    echo "It looks like Nix isn't working.  Please make sure you can run nix-shell, then retry the $0, or submit an issue at $REPO/issues"
    exit 1
  fi
fi

for x in nixpkgs reflex reflex-dom reflex-todomvc ; do
  if [ ! -d "$x" ] ; then
    if ! type -P git ; then
      echo "Please make sure that 'git' is installed and can be run from this shell"
      exit 1
    fi

    echo "Getting ghcjs build scripts"
    git submodule init "$x"
  fi
done

INFO=$(cat <<"EOF"

You are now in a shell with access to ghcjs and cabal.  You can verify that ghcjs is configured correctly by checking that you get expected output like this:
$ ghcjs --version
The Glorious Glasgow Haskell Compilation System for JavaScript, version 0.1.0 (GHC 7.8.4)

$ cabal install --help | grep ghcjs
--ghcjs                         compile with GHCJS

To build a basic program with ghcjs, do:
$ echo 'main = putStrLn \"Hello, world!\"' > helloWorld.hs
$ ghcjs helloWorld.hs
$ node helloWorld.jsexe/all.js
EOF
)

echo "Entering the ghcjs/nodejs sandbox; this may take several hours the first time you run it"
nix-shell --argstr platform "$PLATFORM" --option extra-binary-caches https://ryantrinkle.com:5443/ -j 8 --pure --command "echo \"$INFO\" ; return" "$@"
