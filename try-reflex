#!/usr/bin/env bash
set -eu

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

REPO="https://github.com/ryantrinkle/try-reflex"

NIXOPTS="--option extra-binary-caches https://ryantrinkle.com:5443/ -j 8"

trap "echo 'It looks like a problem occurred.  Please submit an issue at $REPO/issues'; exit 1" ERR

echo "If you have any trouble with this script, please submit an issue at $REPO/issues"

(

cd "$DIR"

if [ ! -d /nix ] ; then
  if ! type -P curl >/dev/null ; then
    echo "Please make sure that 'curl' is installed and can be run from this shell"
    exit 1
  fi

  echo "In order to continue, $0 must install the Nix package manager.  This requires root access, so you will be prompted for your password.  If you do not wish to continue, just hit Ctrl-C at the password prompt."
  ./installNix.sh
fi

)

# The command to source the nix script.  This should be a line of valid bash code.
SOURCE_NIX_SCRIPT=". ~/.nix-profile/etc/profile.d/nix.sh"

# Whether the nix script needed to be sourced - i.e. nix commands are not available without doing so, from the user's basic prompt.
NEEDED_TO_SOURCE_NIX_SCRIPT=0

if ! type -P nix-shell >/dev/null ; then
  $SOURCE_NIX_SCRIPT
  NEEDED_TO_SOURCE_NIX_SCRIPT=1
  if ! type -P nix-shell >/dev/null ; then
    echo "It looks like Nix isn't working.  Please make sure you can run nix-shell, then retry the $0, or submit an issue at $REPO/issues"
    exit 1
  fi
fi

# The minimum required version of Nix to run this script.
MIN_REQUIRED_NIX_VERSION="1.8"

if [ "$(nix-instantiate --eval --expr "builtins.compareVersions builtins.nixVersion \"$MIN_REQUIRED_NIX_VERSION\" >= 0")" != "true" ] ; then
  echo "It looks like your version of Nix, $(nix-instantiate --eval --expr "builtins.nixVersion"), is older than the minimum version required by try-reflex, \"$MIN_REQUIRED_NIX_VERSION\".  You'll need to upgrade Nix to continue.  Usually, that can be done like this:"
  if [ "$NEEDED_TO_SOURCE_NIX_SCRIPT" -ne 0 ] ; then
    echo "$SOURCE_NIX_SCRIPT"
  fi
  echo "nix-env --upgrade"
  exit 1
fi

(

cd "$DIR"


if ! type -P git >/dev/null ; then
  echo "Please make sure that 'git' is installed and can be run from this shell"
  exit 1
fi

for x in nixpkgs reflex reflex-dom reflex-todomvc ; do
  if [ ! "$(ls -A "$x")" ] ; then

    git submodule update --init --recursive "$x"
  fi
done

)

ROOT_PERMISSION_FIX_SUGGESTION="please use your operating system's \"repair permissions\" feature, if it has one, or manually remove write permissions for your user from the '/' directory."

if [ -e /homeless-shelter ] ; then
  echo "It looks like your system has a directory or file at '/homeless-shelter'.  This will cause the try-reflex build to fail, because the Nix package manager assumes that /homeless-shelter does not exist and cannot be created."
  echo
  echo "If you intentionally created /homeless-shelter, please submit an issue at $REPO/issues, and we will try to find a workaround for this situation.  However, usually, this directory is created by accident when a Nix script is run by a user who has write permissions to the root directory."
  echo
  echo "If this is the case, please remove the /homeless-shelter directory, then ensure that your root directory is not writable by the current user.  To do this, $ROOT_PERMISSION_FIX_SUGGESTION"
  exit 1
elif mkdir /homeless-shelter 2>/dev/null ; then
  rmdir /homeless-shelter
  echo "It looks like your filesystem's root directory is writable by the current user.  This will cause nix to fail building try-reflex, and may also indicate a security vulnerability.  Note that you should not run try-reflex as root."
  echo
  echo "To fix this problem, $ROOT_PERMISSION_FIX_SUGGESTION"
  exit 1
fi

echo "Entering the reflex sandbox..."

# TODO: Use a better check that actually checks for each platform's availability
if [ ! "$(nix-instantiate --eval -E '(import <nixpkgs> {}).stdenv.isDarwin')" = "true" ] ; then
SUGGESTION_GHC=$(cat <<EOF
To run a simple GUI as a native binary:
$ ghc -e 'import Reflex.Dom' -e 'mainWidget $ text \"Hello, world!\"'

Or to see a more complex native binary GUI example (based on the source at $(pwd)/reflex-todomvc/src/Main.hs):
$ reflex-todomvc
EOF
)
else
SUGGESTION_GHC=""
fi

SUGGESTION_GHCJS=$(cat <<EOF2
To create a simple web GUI:
$ cat >hello.hs <<EOF
import Reflex.Dom
main = mainWidget $ text \"Hello, world!\"
EOF
$ ghcjs hello.hs
Then navigate your browser to file://$(pwd)/hello.jsexe/index.html

Or to see a more complex GUI example (based on the source at $(pwd)/reflex-todomvc/src/Main.hs), navigate your browser to file://$(nix-build $NIXOPTS --no-out-link "$DIR" -A ghcjs.reflex-todomvc)/bin/reflex-todomvc.jsexe/index.html
EOF2
)

INFO=$(cat <<EOF

You are now in a shell with access to the Reflex functional reactive programming engine.

$SUGGESTION_GHC

$SUGGESTION_GHCJS
EOF
)

nix-shell "$DIR/shell.nix" $NIXOPTS --command "echo \"$INFO\" ; return" "$@"
